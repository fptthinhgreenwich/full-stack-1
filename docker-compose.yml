version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    environment:
      PORT: 5001
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db # Service name of the PostgreSQL container
    volumes:
      - ./backend:/usr/src/app # For development: reflects code changes
      - /usr/src/app/node_modules # Avoids host node_modules overwriting container's
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      args: # Pass build-time argument to frontend Dockerfile
        REACT_APP_API_URL: ${REACT_APP_API_URL_DOCKER}
    ports:
      - "${FRONTEND_PORT:-3000}:80" # Nginx in container listens on 80
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

